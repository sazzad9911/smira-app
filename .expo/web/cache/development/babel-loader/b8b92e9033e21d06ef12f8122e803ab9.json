{"ast":null,"code":"'use strict';\n\nvar TouchHistoryMath = {\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd;\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);\n  },\n  noCentroid: -1\n};\nmodule.exports = TouchHistoryMath;","map":{"version":3,"sources":["C:/Users/takia/OneDrive/Desktop/Data/Projects/mobile_app/mobile_app/Handoff/node_modules/react-native-image-gallery/src/libraries/GestureResponder/TouchHistoryMath.js"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","module","exports"],"mappings":"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","sourcesContent":["/**\n * @providesModule TouchHistoryMath\n */\n\n'use strict';\n\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n    centroidDimension: function (touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n        var touchBank = touchHistory.touchBank;\n        var total = 0;\n        var count = 0;\n\n        var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n        if (oneTouchData !== null) {\n            if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n                total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n                count = 1;\n            }\n        } else {\n            for (var i = 0; i < touchBank.length; i++) {\n                var touchTrack = touchBank[i];\n                if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n                    var toAdd; // Yuck, program temporarily in invalid state.\n                    if (ofCurrent && isXAxis) {\n                        toAdd = touchTrack.currentPageX;\n                    } else if (ofCurrent && !isXAxis) {\n                        toAdd = touchTrack.currentPageY;\n                    } else if (!ofCurrent && isXAxis) {\n                        toAdd = touchTrack.previousPageX;\n                    } else {\n                        toAdd = touchTrack.previousPageY;\n                    }\n                    total += toAdd;\n                    count++;\n                }\n            }\n        }\n        return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n    },\n\n    currentCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    true // ofCurrent\n    );\n    },\n\n    currentCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    true // ofCurrent\n    );\n    },\n\n    previousCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, // isXAxis\n    false // ofCurrent\n    );\n    },\n\n    previousCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {\n        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, // isXAxis\n    false // ofCurrent\n    );\n    },\n\n    currentCentroidX: function (touchHistory) {\n        return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    true, // isXAxis\n    true // ofCurrent\n    );\n    },\n\n    currentCentroidY: function (touchHistory) {\n        return TouchHistoryMath.centroidDimension(touchHistory, 0, // touchesChangedAfter\n    false, // isXAxis\n    true // ofCurrent\n    );\n    },\n\n    noCentroid: -1\n};\n\nmodule.exports = TouchHistoryMath;\n"]},"metadata":{},"sourceType":"script"}