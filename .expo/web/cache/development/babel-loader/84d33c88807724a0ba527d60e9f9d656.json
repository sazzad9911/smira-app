{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport PropTypes from 'prop-types';\nimport { createResponder } from \"./libraries/GestureResponder\";\nimport TransformableImage from \"./libraries/TransformableImage\";\nimport ViewPager from \"./libraries/ViewPager\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DEFAULT_FLAT_LIST_PROPS = {\n  windowSize: 3\n};\n\nvar Gallery = function (_PureComponent) {\n  _inherits(Gallery, _PureComponent);\n\n  var _super = _createSuper(Gallery);\n\n  function Gallery(props) {\n    var _this;\n\n    _classCallCheck(this, Gallery);\n\n    _this = _super.call(this, props);\n    _this.imageRefs = new Map();\n    _this.activeResponder = undefined;\n    _this.firstMove = true;\n    _this.currentPage = 0;\n    _this.pageCount = 0;\n    _this.gestureResponder = undefined;\n    _this.renderPage = _this.renderPage.bind(_assertThisInitialized(_this));\n    _this.onPageSelected = _this.onPageSelected.bind(_assertThisInitialized(_this));\n    _this.onPageScrollStateChanged = _this.onPageScrollStateChanged.bind(_assertThisInitialized(_this));\n    _this.getViewPagerInstance = _this.getViewPagerInstance.bind(_assertThisInitialized(_this));\n    _this.getCurrentImageTransformer = _this.getCurrentImageTransformer.bind(_assertThisInitialized(_this));\n    _this.getImageTransformer = _this.getImageTransformer.bind(_assertThisInitialized(_this));\n    _this.getViewPagerInstance = _this.getViewPagerInstance.bind(_assertThisInitialized(_this));\n    _this.activeImageResponder = _this.activeImageResponder.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Gallery, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var onResponderReleaseOrTerminate = function onResponderReleaseOrTerminate(evt, gestureState) {\n        if (_this2.activeResponder) {\n          if (_this2.activeResponder === _this2.viewPagerResponder && !_this2.shouldScrollViewPager(evt, gestureState) && Math.abs(gestureState.vx) > 0.5) {\n            _this2.activeResponder.onEnd(evt, gestureState, true);\n\n            _this2.getViewPagerInstance().flingToPage(_this2.currentPage, gestureState.vx);\n          } else {\n            _this2.activeResponder.onEnd(evt, gestureState);\n          }\n\n          _this2.activeResponder = null;\n        }\n\n        _this2.firstMove = true;\n        _this2.props.onGalleryStateChanged && _this2.props.onGalleryStateChanged(true);\n      };\n\n      this.gestureResponder = createResponder({\n        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(evt, gestureState) {\n          return true;\n        },\n        onStartShouldSetResponder: function onStartShouldSetResponder(evt, gestureState) {\n          return true;\n        },\n        onResponderGrant: this.activeImageResponder,\n        onResponderMove: function onResponderMove(evt, gestureState) {\n          if (_this2.firstMove) {\n            _this2.firstMove = false;\n\n            if (_this2.shouldScrollViewPager(evt, gestureState)) {\n              _this2.activeViewPagerResponder(evt, gestureState);\n            }\n\n            _this2.props.onGalleryStateChanged && _this2.props.onGalleryStateChanged(false);\n          }\n\n          if (_this2.activeResponder === _this2.viewPagerResponder) {\n            var dx = gestureState.moveX - gestureState.previousMoveX;\n\n            var offset = _this2.getViewPagerInstance().getScrollOffsetFromCurrentPage();\n\n            if (dx > 0 && offset > 0 && !_this2.shouldScrollViewPager(evt, gestureState)) {\n              if (dx > offset) {\n                _this2.getViewPagerInstance().scrollByOffset(offset);\n\n                gestureState.moveX -= offset;\n\n                _this2.activeImageResponder(evt, gestureState);\n              }\n            } else if (dx < 0 && offset < 0 && !_this2.shouldScrollViewPager(evt, gestureState)) {\n              if (dx < offset) {\n                _this2.getViewPagerInstance().scrollByOffset(offset);\n\n                gestureState.moveX -= offset;\n\n                _this2.activeImageResponder(evt, gestureState);\n              }\n            }\n          }\n\n          _this2.activeResponder.onMove(evt, gestureState);\n        },\n        onResponderRelease: onResponderReleaseOrTerminate,\n        onResponderTerminate: onResponderReleaseOrTerminate,\n        onResponderTerminationRequest: function onResponderTerminationRequest(evt, gestureState) {\n          return false;\n        },\n        onResponderSingleTapConfirmed: function onResponderSingleTapConfirmed(evt, gestureState) {\n          _this2.props.onSingleTapConfirmed && _this2.props.onSingleTapConfirmed(_this2.currentPage);\n        }\n      });\n      this.viewPagerResponder = {\n        onStart: function onStart(evt, gestureState) {\n          _this2.getViewPagerInstance().onResponderGrant(evt, gestureState);\n        },\n        onMove: function onMove(evt, gestureState) {\n          _this2.getViewPagerInstance().onResponderMove(evt, gestureState);\n        },\n        onEnd: function onEnd(evt, gestureState, disableSettle) {\n          _this2.getViewPagerInstance().onResponderRelease(evt, gestureState, disableSettle);\n        }\n      };\n      this.imageResponder = {\n        onStart: function onStart(evt, gestureState) {\n          var currentImageTransformer = _this2.getCurrentImageTransformer();\n\n          currentImageTransformer && currentImageTransformer.onResponderGrant(evt, gestureState);\n\n          if (_this2.props.onLongPress) {\n            _this2._longPressTimeout = setTimeout(function () {\n              _this2.props.onLongPress(gestureState);\n            }, 600);\n          }\n        },\n        onMove: function onMove(evt, gestureState) {\n          var currentImageTransformer = _this2.getCurrentImageTransformer();\n\n          currentImageTransformer && currentImageTransformer.onResponderMove(evt, gestureState);\n          clearTimeout(_this2._longPressTimeout);\n        },\n        onEnd: function onEnd(evt, gestureState) {\n          var currentImageTransformer = _this2.getCurrentImageTransformer();\n\n          currentImageTransformer && currentImageTransformer.onResponderRelease(evt, gestureState);\n          clearTimeout(_this2._longPressTimeout);\n        }\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"shouldScrollViewPager\",\n    value: function shouldScrollViewPager(evt, gestureState) {\n      if (gestureState.numberActiveTouches > 1) {\n        return false;\n      }\n\n      var viewTransformer = this.getCurrentImageTransformer();\n\n      if (!viewTransformer) {\n        return false;\n      }\n\n      var space = viewTransformer.getAvailableTranslateSpace();\n      var dx = gestureState.moveX - gestureState.previousMoveX;\n\n      if (dx > 0 && space.left <= 0 && this.currentPage > 0) {\n        return true;\n      }\n\n      if (dx < 0 && space.right <= 0 && this.currentPage < this.pageCount - 1) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"activeImageResponder\",\n    value: function activeImageResponder(evt, gestureState) {\n      if (this.activeResponder !== this.imageResponder) {\n        if (this.activeResponder === this.viewPagerResponder) {\n          this.viewPagerResponder.onEnd(evt, gestureState, true);\n        }\n\n        this.activeResponder = this.imageResponder;\n        this.imageResponder.onStart(evt, gestureState);\n      }\n    }\n  }, {\n    key: \"activeViewPagerResponder\",\n    value: function activeViewPagerResponder(evt, gestureState) {\n      if (this.activeResponder !== this.viewPagerResponder) {\n        if (this.activeResponder === this.imageResponder) {\n          this.imageResponder.onEnd(evt, gestureState);\n        }\n\n        this.activeResponder = this.viewPagerResponder;\n        this.viewPagerResponder.onStart(evt, gestureState);\n      }\n    }\n  }, {\n    key: \"getImageTransformer\",\n    value: function getImageTransformer(page) {\n      if (page >= 0 && page < this.pageCount) {\n        var ref = this.imageRefs.get(page);\n\n        if (ref) {\n          return ref.getViewTransformerInstance();\n        }\n      }\n    }\n  }, {\n    key: \"getCurrentImageTransformer\",\n    value: function getCurrentImageTransformer() {\n      return this.getImageTransformer(this.currentPage);\n    }\n  }, {\n    key: \"getViewPagerInstance\",\n    value: function getViewPagerInstance() {\n      return this.refs['galleryViewPager'];\n    }\n  }, {\n    key: \"onPageSelected\",\n    value: function onPageSelected(page) {\n      this.currentPage = page;\n      this.props.onPageSelected && this.props.onPageSelected(page);\n    }\n  }, {\n    key: \"onPageScrollStateChanged\",\n    value: function onPageScrollStateChanged(state) {\n      if (state === 'idle') {\n        this.resetHistoryImageTransform();\n      }\n\n      this.props.onPageScrollStateChanged && this.props.onPageScrollStateChanged(state);\n    }\n  }, {\n    key: \"renderPage\",\n    value: function renderPage(pageData, pageId) {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          _onViewTransformed = _this$props.onViewTransformed,\n          _onTransformGestureReleased = _this$props.onTransformGestureReleased,\n          errorComponent = _this$props.errorComponent,\n          imageComponent = _this$props.imageComponent;\n      return _jsx(TransformableImage, {\n        onViewTransformed: function onViewTransformed(transform) {\n          _onViewTransformed && _onViewTransformed(transform, pageId);\n        },\n        onTransformGestureReleased: function onTransformGestureReleased(transform) {\n          return _onTransformGestureReleased && _onTransformGestureReleased(transform, pageId);\n        },\n        ref: function ref(_ref) {\n          _this3.imageRefs.set(pageId, _ref);\n        },\n        errorComponent: errorComponent,\n        imageComponent: imageComponent,\n        image: pageData\n      }, 'innerImage#' + pageId);\n    }\n  }, {\n    key: \"resetHistoryImageTransform\",\n    value: function resetHistoryImageTransform() {\n      var transformer = this.getImageTransformer(this.currentPage + 1);\n\n      if (transformer) {\n        transformer.forceUpdateTransform({\n          scale: 1,\n          translateX: 0,\n          translateY: 0\n        });\n      }\n\n      transformer = this.getImageTransformer(this.currentPage - 1);\n\n      if (transformer) {\n        transformer.forceUpdateTransform({\n          scale: 1,\n          translateX: 0,\n          translateY: 0\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var gestureResponder = this.gestureResponder;\n      var images = this.props.images;\n\n      if (!images) {\n        images = [];\n      }\n\n      this.pageCount = images.length;\n\n      if (this.pageCount <= 0) {\n        gestureResponder = {};\n      }\n\n      var flatListProps = _objectSpread(_objectSpread({}, DEFAULT_FLAT_LIST_PROPS), this.props.flatListProps);\n\n      return _jsx(ViewPager, _objectSpread(_objectSpread(_objectSpread({}, this.props), {}, {\n        flatListProps: flatListProps,\n        ref: 'galleryViewPager',\n        scrollViewStyle: this.props.scrollViewStyle,\n        scrollEnabled: false,\n        renderPage: this.renderPage,\n        pageDataArray: images\n      }, gestureResponder), {}, {\n        onPageSelected: this.onPageSelected,\n        onPageScrollStateChanged: this.onPageScrollStateChanged,\n        onPageScroll: this.props.onPageScroll,\n        removeClippedSubviews: this.props.removeClippedSubviews\n      }));\n    }\n  }]);\n\n  return Gallery;\n}(PureComponent);\n\nGallery.propTypes = _objectSpread(_objectSpread({}, View.propTypes), {}, {\n  images: PropTypes.arrayOf(PropTypes.object),\n  initialPage: PropTypes.number,\n  scrollViewStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,\n  pageMargin: PropTypes.number,\n  onPageSelected: PropTypes.func,\n  onPageScrollStateChanged: PropTypes.func,\n  onPageScroll: PropTypes.func,\n  onSingleTapConfirmed: PropTypes.func,\n  onGalleryStateChanged: PropTypes.func,\n  onLongPress: PropTypes.func,\n  removeClippedSubviews: PropTypes.bool,\n  imageComponent: PropTypes.func,\n  errorComponent: PropTypes.func,\n  flatListProps: PropTypes.object\n});\nGallery.defaultProps = {\n  removeClippedSubviews: true,\n  imageComponent: undefined,\n  scrollViewStyle: {},\n  flatListProps: DEFAULT_FLAT_LIST_PROPS\n};\nexport { Gallery as default };","map":{"version":3,"sources":["C:/Users/takia/OneDrive/Desktop/Data/Projects/mobile_app/mobile_app/Handoff/node_modules/react-native-image-gallery/src/Gallery.js"],"names":["React","PureComponent","ViewPropTypes","PropTypes","createResponder","TransformableImage","ViewPager","DEFAULT_FLAT_LIST_PROPS","windowSize","Gallery","props","imageRefs","Map","activeResponder","undefined","firstMove","currentPage","pageCount","gestureResponder","renderPage","bind","onPageSelected","onPageScrollStateChanged","getViewPagerInstance","getCurrentImageTransformer","getImageTransformer","activeImageResponder","onResponderReleaseOrTerminate","evt","gestureState","viewPagerResponder","shouldScrollViewPager","Math","abs","vx","onEnd","flingToPage","onGalleryStateChanged","onStartShouldSetResponderCapture","onStartShouldSetResponder","onResponderGrant","onResponderMove","activeViewPagerResponder","dx","moveX","previousMoveX","offset","getScrollOffsetFromCurrentPage","scrollByOffset","onMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onResponderSingleTapConfirmed","onSingleTapConfirmed","onStart","disableSettle","imageResponder","currentImageTransformer","onLongPress","_longPressTimeout","setTimeout","clearTimeout","_isMounted","numberActiveTouches","viewTransformer","space","getAvailableTranslateSpace","left","right","page","ref","get","getViewTransformerInstance","refs","state","resetHistoryImageTransform","pageData","pageId","onViewTransformed","onTransformGestureReleased","errorComponent","imageComponent","transform","set","transformer","forceUpdateTransform","scale","translateX","translateY","images","length","flatListProps","scrollViewStyle","onPageScroll","removeClippedSubviews","propTypes","View","arrayOf","object","initialPage","number","style","pageMargin","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { View, ViewPropTypes } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { createResponder } from './libraries/GestureResponder';\nimport TransformableImage from './libraries/TransformableImage';\nimport ViewPager from './libraries/ViewPager';\n\nconst DEFAULT_FLAT_LIST_PROPS = {\n    windowSize: 3\n};\n\nexport default class Gallery extends PureComponent {\n    static propTypes = {\n        ...View.propTypes,\n        images: PropTypes.arrayOf(PropTypes.object),\n        initialPage: PropTypes.number,\n        scrollViewStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,\n        pageMargin: PropTypes.number,\n        onPageSelected: PropTypes.func,\n        onPageScrollStateChanged: PropTypes.func,\n        onPageScroll: PropTypes.func,\n        onSingleTapConfirmed: PropTypes.func,\n        onGalleryStateChanged: PropTypes.func,\n        onLongPress: PropTypes.func,\n        removeClippedSubviews: PropTypes.bool,\n        imageComponent: PropTypes.func,\n        errorComponent: PropTypes.func,\n        flatListProps: PropTypes.object\n    };\n\n    static defaultProps = {\n        removeClippedSubviews: true,\n        imageComponent: undefined,\n        scrollViewStyle: {},\n        flatListProps: DEFAULT_FLAT_LIST_PROPS\n    };\n\n    imageRefs = new Map();\n    activeResponder = undefined;\n    firstMove = true;\n    currentPage = 0;\n    pageCount = 0;\n    gestureResponder = undefined;\n\n    constructor (props) {\n        super(props);\n\n        this.renderPage = this.renderPage.bind(this);\n        this.onPageSelected = this.onPageSelected.bind(this);\n        this.onPageScrollStateChanged = this.onPageScrollStateChanged.bind(this);\n        this.getViewPagerInstance = this.getViewPagerInstance.bind(this);\n        this.getCurrentImageTransformer = this.getCurrentImageTransformer.bind(this);\n        this.getImageTransformer = this.getImageTransformer.bind(this);\n        this.getViewPagerInstance = this.getViewPagerInstance.bind(this);\n        this.activeImageResponder = this.activeImageResponder.bind(this);\n    }\n\n    componentWillMount () {\n        let onResponderReleaseOrTerminate = (evt, gestureState) => {\n            if (this.activeResponder) {\n                if (this.activeResponder === this.viewPagerResponder &&\n                    !this.shouldScrollViewPager(evt, gestureState) &&\n                    Math.abs(gestureState.vx) > 0.5) {\n                    this.activeResponder.onEnd(evt, gestureState, true);\n                    this.getViewPagerInstance().flingToPage(this.currentPage, gestureState.vx);\n                } else {\n                    this.activeResponder.onEnd(evt, gestureState);\n                }\n                this.activeResponder = null;\n            }\n            this.firstMove = true;\n            this.props.onGalleryStateChanged && this.props.onGalleryStateChanged(true);\n        };\n\n        this.gestureResponder = createResponder({\n            onStartShouldSetResponderCapture: (evt, gestureState) => true,\n            onStartShouldSetResponder: (evt, gestureState) => true,\n            onResponderGrant: this.activeImageResponder,\n            onResponderMove: (evt, gestureState) => {\n                if (this.firstMove) {\n                    this.firstMove = false;\n                    if (this.shouldScrollViewPager(evt, gestureState)) {\n                        this.activeViewPagerResponder(evt, gestureState);\n                    }\n                    this.props.onGalleryStateChanged && this.props.onGalleryStateChanged(false);\n                }\n                if (this.activeResponder === this.viewPagerResponder) {\n                    const dx = gestureState.moveX - gestureState.previousMoveX;\n                    const offset = this.getViewPagerInstance().getScrollOffsetFromCurrentPage();\n                    if (dx > 0 && offset > 0 && !this.shouldScrollViewPager(evt, gestureState)) {\n                        if (dx > offset) { // active image responder\n                            this.getViewPagerInstance().scrollByOffset(offset);\n                            gestureState.moveX -= offset;\n                            this.activeImageResponder(evt, gestureState);\n                        }\n                    } else if (dx < 0 && offset < 0 && !this.shouldScrollViewPager(evt, gestureState)) {\n                        if (dx < offset) { // active image responder\n                            this.getViewPagerInstance().scrollByOffset(offset);\n                            gestureState.moveX -= offset;\n                            this.activeImageResponder(evt, gestureState);\n                        }\n                    }\n                }\n                this.activeResponder.onMove(evt, gestureState);\n            },\n            onResponderRelease: onResponderReleaseOrTerminate,\n            onResponderTerminate: onResponderReleaseOrTerminate,\n            onResponderTerminationRequest: (evt, gestureState) => false, // Do not allow parent view to intercept gesture\n            onResponderSingleTapConfirmed: (evt, gestureState) => {\n                this.props.onSingleTapConfirmed && this.props.onSingleTapConfirmed(this.currentPage);\n            }\n        });\n\n        this.viewPagerResponder = {\n            onStart: (evt, gestureState) => {\n                this.getViewPagerInstance().onResponderGrant(evt, gestureState);\n            },\n            onMove: (evt, gestureState) => {\n                this.getViewPagerInstance().onResponderMove(evt, gestureState);\n            },\n            onEnd: (evt, gestureState, disableSettle) => {\n                this.getViewPagerInstance().onResponderRelease(evt, gestureState, disableSettle);\n            }\n        };\n\n        this.imageResponder = {\n            onStart: (evt, gestureState) => {\n                const currentImageTransformer = this.getCurrentImageTransformer();\n                currentImageTransformer && currentImageTransformer.onResponderGrant(evt, gestureState);\n                if (this.props.onLongPress) {\n                    this._longPressTimeout = setTimeout(() => {\n                        this.props.onLongPress(gestureState);\n                    }, 600);\n                }\n            },\n            onMove: (evt, gestureState) => {\n                const currentImageTransformer = this.getCurrentImageTransformer();\n                currentImageTransformer && currentImageTransformer.onResponderMove(evt, gestureState);\n                clearTimeout(this._longPressTimeout);\n            },\n            onEnd: (evt, gestureState) => {\n                const currentImageTransformer = this.getCurrentImageTransformer();\n                currentImageTransformer && currentImageTransformer.onResponderRelease(evt, gestureState);\n                clearTimeout(this._longPressTimeout);\n            }\n        };\n    }\n\n    componentDidMount () {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount () {\n        this._isMounted = false;\n    }\n\n    shouldScrollViewPager (evt, gestureState) {\n        if (gestureState.numberActiveTouches > 1) {\n            return false;\n        }\n        const viewTransformer = this.getCurrentImageTransformer();\n        if (!viewTransformer) {\n            return false;\n        }\n\n        const space = viewTransformer.getAvailableTranslateSpace();\n        const dx = gestureState.moveX - gestureState.previousMoveX;\n\n        if (dx > 0 && space.left <= 0 && this.currentPage > 0) {\n            return true;\n        }\n        if (dx < 0 && space.right <= 0 && this.currentPage < this.pageCount - 1) {\n            return true;\n        }\n        return false;\n    }\n\n    activeImageResponder (evt, gestureState) {\n        if (this.activeResponder !== this.imageResponder) {\n            if (this.activeResponder === this.viewPagerResponder) {\n                this.viewPagerResponder.onEnd(evt, gestureState, true); // pass true to disable ViewPager settle\n            }\n            this.activeResponder = this.imageResponder;\n            this.imageResponder.onStart(evt, gestureState);\n        }\n    }\n\n    activeViewPagerResponder (evt, gestureState) {\n        if (this.activeResponder !== this.viewPagerResponder) {\n            if (this.activeResponder === this.imageResponder) {\n                this.imageResponder.onEnd(evt, gestureState);\n            }\n            this.activeResponder = this.viewPagerResponder;\n            this.viewPagerResponder.onStart(evt, gestureState);\n        }\n    }\n\n    getImageTransformer (page) {\n        if (page >= 0 && page < this.pageCount) {\n            let ref = this.imageRefs.get(page);\n            if (ref) {\n                return ref.getViewTransformerInstance();\n            }\n        }\n    }\n\n    getCurrentImageTransformer () {\n        return this.getImageTransformer(this.currentPage);\n    }\n\n    getViewPagerInstance () {\n        return this.refs['galleryViewPager'];\n    }\n\n    onPageSelected (page) {\n        this.currentPage = page;\n        this.props.onPageSelected && this.props.onPageSelected(page);\n    }\n\n    onPageScrollStateChanged (state) {\n        if (state === 'idle') {\n            this.resetHistoryImageTransform();\n        }\n        this.props.onPageScrollStateChanged && this.props.onPageScrollStateChanged(state);\n    }\n\n    renderPage (pageData, pageId) {\n        const { onViewTransformed, onTransformGestureReleased, errorComponent, imageComponent } = this.props;\n        return (\n            <TransformableImage\n              onViewTransformed={((transform) => {\n                  onViewTransformed && onViewTransformed(transform, pageId);\n              })}\n              onTransformGestureReleased={((transform) => {\n                  // need the 'return' here because the return value is checked in ViewTransformer\n                  return onTransformGestureReleased && onTransformGestureReleased(transform, pageId);\n              })}\n              ref={((ref) => { this.imageRefs.set(pageId, ref); })}\n              key={'innerImage#' + pageId}\n              errorComponent={errorComponent}\n              imageComponent={imageComponent}\n              image={pageData}\n            />\n        );\n    }\n\n    resetHistoryImageTransform () {\n        let transformer = this.getImageTransformer(this.currentPage + 1);\n        if (transformer) {\n            transformer.forceUpdateTransform({scale: 1, translateX: 0, translateY: 0});\n        }\n\n        transformer = this.getImageTransformer(this.currentPage - 1);\n        if (transformer) {\n            transformer.forceUpdateTransform({scale: 1, translateX: 0, translateY: 0});\n        }\n    }\n\n    render () {\n        let gestureResponder = this.gestureResponder;\n\n        let images = this.props.images;\n        if (!images) {\n            images = [];\n        }\n        this.pageCount = images.length;\n\n        if (this.pageCount <= 0) {\n            gestureResponder = {};\n        }\n\n        const flatListProps = {...DEFAULT_FLAT_LIST_PROPS, ...this.props.flatListProps};\n\n        return (\n            <ViewPager\n              {...this.props}\n              flatListProps={flatListProps}\n              ref={'galleryViewPager'}\n              scrollViewStyle={this.props.scrollViewStyle}\n              scrollEnabled={false}\n              renderPage={this.renderPage}\n              pageDataArray={images}\n              {...gestureResponder}\n              onPageSelected={this.onPageSelected}\n              onPageScrollStateChanged={this.onPageScrollStateChanged}\n              onPageScroll={this.props.onPageScroll}\n              removeClippedSubviews={this.props.removeClippedSubviews}\n            />\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}